steps:
- name: 'gcr.io/cloud-builders/docker'
  id: Build image
  entrypoint: bash
  args: 
    - '-c'
    - |
      cd src/api/
      docker build -t \
        southamerica-east1-docker.pkg.dev/angelic-digit-302818/run-challenge-api/run-challenge-api:$SHORT_SHA \
        .
- name: 'gcr.io/cloud-builders/docker'
  id: Push image
  entrypoint: bash
  args: 
    - '-c'
    - |
      docker push \
        southamerica-east1-docker.pkg.dev/angelic-digit-302818/run-challenge-api/run-challenge-api:$SHORT_SHA
# Deploy container image to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: Deploy image
  entrypoint: bash
  args:
    - '-c'
    - |
      gcloud run deploy run-challenge-api \
        --image southamerica-east1-docker.pkg.dev/angelic-digit-302818/run-challenge-api/run-challenge-api:$SHORT_SHA \
        --region southamerica-east1 \
        --port 80
- name: gcr.io/cloud-builders/curl
  id: Integration test
  entrypoint: bash
  args:
    - '-c'
    - |
      http_response=$(curl -s -o response.txt -w "%{http_code}" https://https://run-challenge-api-h5xyaztceq-rj.a.run.app/get-flights)
      if [ $http_response != "200" ]; then
          exit 0
      else
          echo "Server returned:"
          cat response.txt    
      fi